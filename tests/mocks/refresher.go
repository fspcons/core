// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/fspcons/core/models"
)

// Ensure, that RefresherMock does implement models.Refresher.
// If this is not the case, regenerate this file with moq.
var _ models.Refresher[*RefresherMock] = &RefresherMock{}

// RefresherMock is a mock implementation of models.Refresher.
//
//	func TestSomethingThatUsesRefresher(t *testing.T) {
//
//		// make and configure a mocked models.Refresher
//		mockedRefresher := &RefresherMock{
//			RefreshTimestampFunc: func() T {
//				panic("mock out the RefreshTimestamp method")
//			},
//			ValidateFunc: func() error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedRefresher in code that requires models.Refresher
//		// and then make assertions.
//
//	}
type RefresherMock struct {
	// RefreshTimestampFunc mocks the RefreshTimestamp method.
	RefreshTimestampFunc func() *RefresherMock

	// ValidateFunc mocks the Validate method.
	ValidateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// RefreshTimestamp holds details about calls to the RefreshTimestamp method.
		RefreshTimestamp []struct {
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
		}
	}
	lockRefreshTimestamp sync.RWMutex
	lockValidate         sync.RWMutex
}

// RefreshTimestamp calls RefreshTimestampFunc.
func (mock *RefresherMock) RefreshTimestamp() *RefresherMock {
	if mock.RefreshTimestampFunc == nil {
		panic("RefresherMock.RefreshTimestampFunc: method is nil but Refresher.RefreshTimestamp was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRefreshTimestamp.Lock()
	mock.calls.RefreshTimestamp = append(mock.calls.RefreshTimestamp, callInfo)
	mock.lockRefreshTimestamp.Unlock()
	return mock.RefreshTimestampFunc()
}

// RefreshTimestampCalls gets all the calls that were made to RefreshTimestamp.
// Check the length with:
//
//	len(mockedRefresher.RefreshTimestampCalls())
func (mock *RefresherMock) RefreshTimestampCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRefreshTimestamp.RLock()
	calls = mock.calls.RefreshTimestamp
	mock.lockRefreshTimestamp.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *RefresherMock) Validate() error {
	if mock.ValidateFunc == nil {
		panic("RefresherMock.ValidateFunc: method is nil but Refresher.Validate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc()
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedRefresher.ValidateCalls())
func (mock *RefresherMock) ValidateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
