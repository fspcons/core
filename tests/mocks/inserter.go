// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fspcons/core/datas"
	"sync"
)

// Ensure, that InserterMock does implement datas.Inserter.
// If this is not the case, regenerate this file with moq.
var _ datas.Inserter[any] = &InserterMock[any]{}

// InserterMock is a mock implementation of datas.Inserter.
//
//	func TestSomethingThatUsesInserter(t *testing.T) {
//
//		// make and configure a mocked datas.Inserter
//		mockedInserter := &InserterMock{
//			InsertFunc: func(ctx context.Context, model T) error {
//				panic("mock out the Insert method")
//			},
//		}
//
//		// use mockedInserter in code that requires datas.Inserter
//		// and then make assertions.
//
//	}
type InserterMock[T any] struct {
	// InsertFunc mocks the Insert method.
	InsertFunc func(ctx context.Context, model T) error

	// calls tracks calls to the methods.
	calls struct {
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Model is the model argument value.
			Model T
		}
	}
	lockInsert sync.RWMutex
}

// Insert calls InsertFunc.
func (mock *InserterMock[T]) Insert(ctx context.Context, model T) error {
	if mock.InsertFunc == nil {
		panic("InserterMock.InsertFunc: method is nil but Inserter.Insert was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Model T
	}{
		Ctx:   ctx,
		Model: model,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(ctx, model)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedInserter.InsertCalls())
func (mock *InserterMock[T]) InsertCalls() []struct {
	Ctx   context.Context
	Model T
} {
	var calls []struct {
		Ctx   context.Context
		Model T
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}
