// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/fspcons/core/models"
)


// Ensure, that UpdateInputMock does implement models.UpdateInput.
// If this is not the case, regenerate this file with moq.
var _ models.UpdateInput[updateInputType] = &UpdateInputMock[updateInputType]{}

// UpdateInputMock is a mock implementation of models.UpdateInput.
//
//	func TestSomethingThatUsesUpdateInput(t *testing.T) {
//
//		// make and configure a mocked models.UpdateInput
//		mockedUpdateInput := &UpdateInputMock{
//			ApplyChangesFunc: func(old R) (R, bool) {
//				panic("mock out the ApplyChanges method")
//			},
//			ValidateFunc: func() error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedUpdateInput in code that requires models.UpdateInput
//		// and then make assertions.
//
//	}
type UpdateInputMock[R models.Refresher[R]] struct {
	// ApplyChangesFunc mocks the ApplyChanges method.
	ApplyChangesFunc func(old R) (R, bool)

	// ValidateFunc mocks the Validate method.
	ValidateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// ApplyChanges holds details about calls to the ApplyChanges method.
		ApplyChanges []struct {
			// Old is the old argument value.
			Old R
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
		}
	}
	lockApplyChanges sync.RWMutex
	lockValidate     sync.RWMutex
}

// ApplyChanges calls ApplyChangesFunc.
func (mock *UpdateInputMock[R]) ApplyChanges(old R) (R, bool) {
	if mock.ApplyChangesFunc == nil {
		panic("UpdateInputMock.ApplyChangesFunc: method is nil but UpdateInput.ApplyChanges was just called")
	}
	callInfo := struct {
		Old R
	}{
		Old: old,
	}
	mock.lockApplyChanges.Lock()
	mock.calls.ApplyChanges = append(mock.calls.ApplyChanges, callInfo)
	mock.lockApplyChanges.Unlock()
	return mock.ApplyChangesFunc(old)
}

// ApplyChangesCalls gets all the calls that were made to ApplyChanges.
// Check the length with:
//
//	len(mockedUpdateInput.ApplyChangesCalls())
func (mock *UpdateInputMock[R]) ApplyChangesCalls() []struct {
	Old R
} {
	var calls []struct {
		Old R
	}
	mock.lockApplyChanges.RLock()
	calls = mock.calls.ApplyChanges
	mock.lockApplyChanges.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *UpdateInputMock[R]) Validate() error {
	if mock.ValidateFunc == nil {
		panic("UpdateInputMock.ValidateFunc: method is nil but UpdateInput.Validate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc()
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedUpdateInput.ValidateCalls())
func (mock *UpdateInputMock[R]) ValidateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
