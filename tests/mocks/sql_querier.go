// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fspcons/core/datas"
	"sync"
)

// Ensure, that SqlQuerierMock does implement datas.SqlQuerier.
// If this is not the case, regenerate this file with moq.
var _ datas.SqlQuerier[datas.Filterable, any] = &SqlQuerierMock[datas.Filterable, any]{}

// SqlQuerierMock is a mock implementation of datas.SqlQuerier.
//
//	func TestSomethingThatUsesSqlQuerier(t *testing.T) {
//
//		// make and configure a mocked datas.SqlQuerier
//		mockedSqlQuerier := &SqlQuerierMock{
//			QueryFunc: func(ctx context.Context, p datas.SqlPaginatorFilter[Q]) ([]T, error) {
//				panic("mock out the Query method")
//			},
//		}
//
//		// use mockedSqlQuerier in code that requires datas.SqlQuerier
//		// and then make assertions.
//
//	}
type SqlQuerierMock[Q datas.Filterable, T any] struct {
	// QueryFunc mocks the Query method.
	QueryFunc func(ctx context.Context, p datas.SqlPaginatorFilter[Q]) ([]T, error)

	// calls tracks calls to the methods.
	calls struct {
		// Query holds details about calls to the Query method.
		Query []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P datas.SqlPaginatorFilter[Q]
		}
	}
	lockQuery sync.RWMutex
}

// Query calls QueryFunc.
func (mock *SqlQuerierMock[Q, T]) Query(ctx context.Context, p datas.SqlPaginatorFilter[Q]) ([]T, error) {
	if mock.QueryFunc == nil {
		panic("SqlQuerierMock.QueryFunc: method is nil but SqlQuerier.Query was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   datas.SqlPaginatorFilter[Q]
	}{
		Ctx: ctx,
		P:   p,
	}
	mock.lockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	mock.lockQuery.Unlock()
	return mock.QueryFunc(ctx, p)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//
//	len(mockedSqlQuerier.QueryCalls())
func (mock *SqlQuerierMock[Q, T]) QueryCalls() []struct {
	Ctx context.Context
	P   datas.SqlPaginatorFilter[Q]
} {
	var calls []struct {
		Ctx context.Context
		P   datas.SqlPaginatorFilter[Q]
	}
	mock.lockQuery.RLock()
	calls = mock.calls.Query
	mock.lockQuery.RUnlock()
	return calls
}
