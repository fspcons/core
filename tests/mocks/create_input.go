// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fspcons/core/models"
	"sync"
)

// Ensure, that CreateInputMock does implement models.CreateInput.
// If this is not the case, regenerate this file with moq.
var _ models.CreateInput[models.Validator] = &CreateInputMock[models.Validator]{}

// CreateInputMock is a mock implementation of models.CreateInput.
//
//	func TestSomethingThatUsesCreateInput(t *testing.T) {
//
//		// make and configure a mocked models.CreateInput
//		mockedCreateInput := &CreateInputMock{
//			TransformFunc: func() V {
//				panic("mock out the Transform method")
//			},
//			ValidateFunc: func() error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedCreateInput in code that requires models.CreateInput
//		// and then make assertions.
//
//	}
type CreateInputMock[V models.Validator] struct {
	// TransformFunc mocks the Transform method.
	TransformFunc func() V

	// ValidateFunc mocks the Validate method.
	ValidateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Transform holds details about calls to the Transform method.
		Transform []struct {
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
		}
	}
	lockTransform sync.RWMutex
	lockValidate  sync.RWMutex
}

// Transform calls TransformFunc.
func (mock *CreateInputMock[V]) Transform() V {
	if mock.TransformFunc == nil {
		panic("CreateInputMock.TransformFunc: method is nil but CreateInput.Transform was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTransform.Lock()
	mock.calls.Transform = append(mock.calls.Transform, callInfo)
	mock.lockTransform.Unlock()
	return mock.TransformFunc()
}

// TransformCalls gets all the calls that were made to Transform.
// Check the length with:
//
//	len(mockedCreateInput.TransformCalls())
func (mock *CreateInputMock[V]) TransformCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTransform.RLock()
	calls = mock.calls.Transform
	mock.lockTransform.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *CreateInputMock[V]) Validate() error {
	if mock.ValidateFunc == nil {
		panic("CreateInputMock.ValidateFunc: method is nil but CreateInput.Validate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc()
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedCreateInput.ValidateCalls())
func (mock *CreateInputMock[V]) ValidateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
