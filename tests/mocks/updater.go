// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fspcons/core/datas"
	"sync"
)

// Ensure, that UpdaterMock does implement datas.Updater.
// If this is not the case, regenerate this file with moq.
var _ datas.Updater[any] = &UpdaterMock[any]{}

// UpdaterMock is a mock implementation of datas.Updater.
//
//	func TestSomethingThatUsesUpdater(t *testing.T) {
//
//		// make and configure a mocked datas.Updater
//		mockedUpdater := &UpdaterMock{
//			UpdateFunc: func(ctx context.Context, t T) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedUpdater in code that requires datas.Updater
//		// and then make assertions.
//
//	}
type UpdaterMock[T any] struct {
	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, t T) error

	// calls tracks calls to the methods.
	calls struct {
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T T
		}
	}
	lockUpdate sync.RWMutex
}

// Update calls UpdateFunc.
func (mock *UpdaterMock[T]) Update(ctx context.Context, t T) error {
	if mock.UpdateFunc == nil {
		panic("UpdaterMock.UpdateFunc: method is nil but Updater.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   T
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, t)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedUpdater.UpdateCalls())
func (mock *UpdaterMock[T]) UpdateCalls() []struct {
	Ctx context.Context
	T   T
} {
	var calls []struct {
		Ctx context.Context
		T   T
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
