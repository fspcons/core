// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fspcons/core/models"
	"sync"
)

// Ensure, that UpdateProcessorMock does implement models.UpdateProcessor.
// If this is not the case, regenerate this file with moq.
var _ models.UpdateProcessor[models.Validator] = &UpdateProcessorMock[models.Validator]{}

// UpdateProcessorMock is a mock implementation of models.UpdateProcessor.
//
//	func TestSomethingThatUsesUpdateProcessor(t *testing.T) {
//
//		// make and configure a mocked models.UpdateProcessor
//		mockedUpdateProcessor := &UpdateProcessorMock{
//			ProcessFunc: func(ctx context.Context, upd *V, old V) error {
//				panic("mock out the Process method")
//			},
//		}
//
//		// use mockedUpdateProcessor in code that requires models.UpdateProcessor
//		// and then make assertions.
//
//	}
type UpdateProcessorMock[V models.Validator] struct {
	// ProcessFunc mocks the Process method.
	ProcessFunc func(ctx context.Context, upd *V, old V) error

	// calls tracks calls to the methods.
	calls struct {
		// Process holds details about calls to the Process method.
		Process []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Upd is the upd argument value.
			Upd *V
			// Old is the old argument value.
			Old V
		}
	}
	lockProcess sync.RWMutex
}

// Process calls ProcessFunc.
func (mock *UpdateProcessorMock[V]) Process(ctx context.Context, upd *V, old V) error {
	if mock.ProcessFunc == nil {
		panic("UpdateProcessorMock.ProcessFunc: method is nil but UpdateProcessor.Process was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Upd *V
		Old V
	}{
		Ctx: ctx,
		Upd: upd,
		Old: old,
	}
	mock.lockProcess.Lock()
	mock.calls.Process = append(mock.calls.Process, callInfo)
	mock.lockProcess.Unlock()
	return mock.ProcessFunc(ctx, upd, old)
}

// ProcessCalls gets all the calls that were made to Process.
// Check the length with:
//
//	len(mockedUpdateProcessor.ProcessCalls())
func (mock *UpdateProcessorMock[V]) ProcessCalls() []struct {
	Ctx context.Context
	Upd *V
	Old V
} {
	var calls []struct {
		Ctx context.Context
		Upd *V
		Old V
	}
	mock.lockProcess.RLock()
	calls = mock.calls.Process
	mock.lockProcess.RUnlock()
	return calls
}
