// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fspcons/core/models"
	"sync"
)

// Ensure, that ValidatorMock does implement models.Validator.
// If this is not the case, regenerate this file with moq.
var _ models.Validator = &ValidatorMock{}

// ValidatorMock is a mock implementation of models.Validator.
//
//	func TestSomethingThatUsesValidator(t *testing.T) {
//
//		// make and configure a mocked models.Validator
//		mockedValidator := &ValidatorMock{
//			ValidateFunc: func() error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedValidator in code that requires models.Validator
//		// and then make assertions.
//
//	}
type ValidatorMock struct {
	// ValidateFunc mocks the Validate method.
	ValidateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Validate holds details about calls to the Validate method.
		Validate []struct {
		}
	}
	lockValidate sync.RWMutex
}

// Validate calls ValidateFunc.
func (mock *ValidatorMock) Validate() error {
	if mock.ValidateFunc == nil {
		panic("ValidatorMock.ValidateFunc: method is nil but Validator.Validate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc()
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedValidator.ValidateCalls())
func (mock *ValidatorMock) ValidateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
