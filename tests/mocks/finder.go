// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fspcons/core/datas"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that FinderMock does implement datas.Finder.
// If this is not the case, regenerate this file with moq.
var _ datas.Finder[any] = &FinderMock[any]{}

// FinderMock is a mock implementation of datas.Finder.
//
//	func TestSomethingThatUsesFinder(t *testing.T) {
//
//		// make and configure a mocked datas.Finder
//		mockedFinder := &FinderMock{
//			FindByFunc: func(ctx context.Context, id uuid.UUID) (T, error) {
//				panic("mock out the FindBy method")
//			},
//		}
//
//		// use mockedFinder in code that requires datas.Finder
//		// and then make assertions.
//
//	}
type FinderMock[T any] struct {
	// FindByFunc mocks the FindBy method.
	FindByFunc func(ctx context.Context, id uuid.UUID) (T, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindBy holds details about calls to the FindBy method.
		FindBy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
	}
	lockFindBy sync.RWMutex
}

// FindBy calls FindByFunc.
func (mock *FinderMock[T]) FindBy(ctx context.Context, id uuid.UUID) (T, error) {
	if mock.FindByFunc == nil {
		panic("FinderMock.FindByFunc: method is nil but Finder.FindBy was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindBy.Lock()
	mock.calls.FindBy = append(mock.calls.FindBy, callInfo)
	mock.lockFindBy.Unlock()
	return mock.FindByFunc(ctx, id)
}

// FindByCalls gets all the calls that were made to FindBy.
// Check the length with:
//
//	len(mockedFinder.FindByCalls())
func (mock *FinderMock[T]) FindByCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindBy.RLock()
	calls = mock.calls.FindBy
	mock.lockFindBy.RUnlock()
	return calls
}
